schema {
  query: Query
  mutation: Mutation
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Category implements Node {
  id: ID!
  name: String!
  jokes: [Joke!]!
  users: [User!]!
}

"A connection to a list of items."
type CategoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CategoryEdge!]
  "A flattened list of the nodes."
  nodes: [Category!]
  totalCount: Int!
}

"An edge in a connection."
type CategoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Category!
}

type Joke implements Node {
  id: ID!
  title: String!
  body: String!
  score: Int!
  userJokeHistories: [UserJokeHistory!]!
  categories: [Category!]!
  users: [User!]!
}

"A connection to a list of items."
type JokeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [JokeEdge!]
  "A flattened list of the nodes."
  nodes: [Joke!]
  totalCount: Int!
}

"An edge in a connection."
type JokeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Joke!
}

type Mutation {
  rateJoke(input: RateJokeInput!): RateJokePayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  jokes(first: Int after: String last: Int before: String jokeLength: JokeLength! = MEDIUM where: JokeFilterInput order: [JokeSortInput!]): JokeConnection
  categories(first: Int after: String last: Int before: String where: CategoryFilterInput order: [CategorySortInput!]): CategoryConnection
  userJokeHistories(first: Int after: String last: Int before: String where: UserJokeHistoryFilterInput order: [UserJokeHistorySortInput!]): UserJokeHistoryConnection
  userJokeHistoryByUserId(first: Int after: String last: Int before: String where: UserJokeHistoryFilterInput order: [UserJokeHistorySortInput!]): UserJokeHistoryConnection
}

type RateJokePayload {
  userJokeHistory: UserJokeHistory
  errors: [UserError!]
}

type User {
  id: Int!
  firebaseUid: String!
  jokeCount: Int!
  name: String!
  createdOn: DateTime!
  lastLogin: DateTime!
  userJokeHistories: [UserJokeHistory!]!
  categories: [Category!]!
  jokes: [Joke!]!
}

type UserError {
  code: ErrorCodes!
  message: String!
}

type UserJokeHistory {
  id: ID!
  bookmarked: Boolean!
  rating: RatingValue!
  userId: ID!
  user: User!
  jokeId: ID!
  joke: Joke!
}

"A connection to a list of items."
type UserJokeHistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserJokeHistoryEdge!]
  "A flattened list of the nodes."
  nodes: [UserJokeHistory!]
  totalCount: Int!
}

"An edge in a connection."
type UserJokeHistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserJokeHistory!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CategoryFilterInput {
  and: [CategoryFilterInput!]
  or: [CategoryFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  jokes: ListFilterInputTypeOfJokeFilterInput
  users: ListFilterInputTypeOfUserFilterInput
}

input CategorySortInput {
  id: SortEnumType
  name: SortEnumType
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input JokeFilterInput {
  and: [JokeFilterInput!]
  or: [JokeFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  body: StringOperationFilterInput
  score: ComparableInt32OperationFilterInput
  userJokeHistories: ListFilterInputTypeOfUserJokeHistoryFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  users: ListFilterInputTypeOfUserFilterInput
}

input JokeSortInput {
  id: SortEnumType
  title: SortEnumType
  body: SortEnumType
  score: SortEnumType
}

input ListFilterInputTypeOfCategoryFilterInput {
  all: CategoryFilterInput
  none: CategoryFilterInput
  some: CategoryFilterInput
  any: Boolean
}

input ListFilterInputTypeOfJokeFilterInput {
  all: JokeFilterInput
  none: JokeFilterInput
  some: JokeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserJokeHistoryFilterInput {
  all: UserJokeHistoryFilterInput
  none: UserJokeHistoryFilterInput
  some: UserJokeHistoryFilterInput
  any: Boolean
}

input RateJokeInput {
  jokeId: ID!
  rating: RatingValue!
  bookmarked: Boolean! = false
}

input RatingValueOperationFilterInput {
  eq: RatingValue
  neq: RatingValue
  in: [RatingValue!]
  nin: [RatingValue!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  id: ComparableInt32OperationFilterInput
  firebaseUid: StringOperationFilterInput
  jokeCount: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  createdOn: ComparableDateTimeOperationFilterInput
  lastLogin: ComparableDateTimeOperationFilterInput
  userJokeHistories: ListFilterInputTypeOfUserJokeHistoryFilterInput
  categories: ListFilterInputTypeOfCategoryFilterInput
  jokes: ListFilterInputTypeOfJokeFilterInput
}

input UserJokeHistoryFilterInput {
  and: [UserJokeHistoryFilterInput!]
  or: [UserJokeHistoryFilterInput!]
  bookmarked: BooleanOperationFilterInput
  rating: RatingValueOperationFilterInput
  userId: ComparableInt32OperationFilterInput
  user: UserFilterInput
  jokeId: ComparableInt32OperationFilterInput
  joke: JokeFilterInput
}

input UserJokeHistorySortInput {
  bookmarked: SortEnumType
  rating: SortEnumType
  userId: SortEnumType
  user: UserSortInput
  jokeId: SortEnumType
  joke: JokeSortInput
}

input UserSortInput {
  id: SortEnumType
  firebaseUid: SortEnumType
  jokeCount: SortEnumType
  name: SortEnumType
  createdOn: SortEnumType
  lastLogin: SortEnumType
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum ErrorCodes {
  SERVER_ERROR
  DUPLICATE_ENTRY
  RESOURCE_NOT_FOUND
}

enum JokeLength {
  SMALL
  MEDIUM
  LARGE
}

enum RatingValue {
  SKIP
  GOOD
  BAD
}

enum SortEnumType {
  ASC
  DESC
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")